{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","reject","canProcess","id","logSuccess","result","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,WACTD,EAAQF,KACPA,OAKHI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCdbK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAACC,GAGlBA,EAFmBW,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAK3DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAM7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GACnCQ,EAAgBH,EAAO,QAAQD,KAAKJ,GCvBtC,IAKQe,EAAkB,SAACC,GACrB,IAN6BC,EAAKC,EAM5BvB,GANuBsB,EAMW,IANNC,EAMW,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMlD,OAAO,IAAIpB,SAAQ,SAACC,EAASwB,GAC/BvB,YAAW,WACT,IAAMwB,EAAaJ,KAAKE,SAAW,GAC7BG,EAAKR,EAAYQ,GACnBD,EACFzB,EAAQ,CAAC0B,KAAI7B,UAEb2B,EAAOE,KAER7B,OAKC8B,EAAa,SAACC,GAClBxB,QAAQC,IAAR,eAA2BuB,EAAOF,GAAlC,iBAAqDE,EAAO/B,MAA5D,OAGIgC,EAAW,SAAAH,GACftB,QAAQ0B,KAAR,gCAA6CJ,EAA7C,8BAKFT,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAC/BzB,KAAKqB,GACLK,MAAMH,GAETZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAC/BzB,KAAKqB,GACLK,MAAMH,GAETZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,KAC/BzB,KAAKqB,GACLK,MAAMH,GAETZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAC/BzB,KAAKqB,GACLK,MAAMH,K","file":"main.734aaed33bc1a59c7b1f.js","sourcesContent":["const delay = ms => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          resolve(ms);\r\n        }, ms);\r\n      });\r\n    // Твой код\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\n  const toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,)\r\n      resolve(updatedUsers);\r\n    })\r\n  };\r\n  \r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n  \r\n\r\n  /*\r\n   * Должно работать так\r\n   */\r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);\r\n  toggleUserState(users, 'Ajax').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n  \r\n  \r\n  const makeTransaction = (transaction) => {\r\n      const delay = randomIntegerFromInterval(200, 500);\r\n      return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      const id = transaction.id;\r\n      if (canProcess) {\r\n        resolve({id, delay});\r\n      } else {\r\n        reject(id);\r\n      }\r\n    }, delay);\r\n});\r\n  };\r\n\r\n  \r\n  const logSuccess = (result) => {\r\n    console.log(`Transaction ${result.id} processed in ${result.delay}ms`);\r\n  };\r\n  \r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n  \r\n//    * Должно работать так\r\n//    */\r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n"],"sourceRoot":""}